<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/tx
             http://www.springframework.org/schema/tx/spring-tx.xsd
              http://www.springframework.org/schema/aop
              http://www.springframework.org/schema/aop/spring-aop.xsd
                http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context.xsd">

<!--1 配置数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <!--数据库驱动-->
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <!--连接数据库的url-->
        <property name="url" value="jdbc:mysql://localhost:3306/springsy4?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC"></property>
        <!--连接数据库的用户名-->
        <property name="username" value="root"></property>
        <!--连接数据库的密码-->
        <property name="password" value="123456"></property>
    </bean>
    <!--2 配置JDBC模板-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <!--默认必须使用数据源-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--3 配置注入类-->
    <!--<bean id="userDao" class="cn.hcx.dao.UserDaoImpl">-->
    <!--    &lt;!&ndash;将jdbcTemplate注入到accountDao实例中&ndash;&gt;-->
    <!--    <property name="jdbcTemplate" ref="jdbcTemplate"></property>-->
    <!--</bean>-->
    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="cn.hcx"></context:component-scan>

    <!--4 事务管理器，依赖于数据源-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--5 注册事务管理器驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <!--1 目标类-->
    <!--<bean id="bookDao" class="cn.hcx.dao.BookDaoImpl"></bean>-->
    <!--2切面-->
    <bean id="MyAspect" class="cn.hcx.aspect.MyAspect"></bean>
    <!--3 aop编程-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect ref="MyAspect">
            <!--3.1 配置切入点，通知最后增强哪些方法-->
            <aop:pointcut id="myPointCut" expression="execution(* cn.hcx.service.*.*(..))"/>
            <!--3.2 关联通知Advice和切入点pointCut-->
            <!--3.2.1 前置通知-->
            <!--<aop:before method="myBefore" pointcut-ref="myPointCut"></aop:before>-->
            <!--&lt;!&ndash;3.2.2 后置通知，在方法返回之后执行，就可以获得返回值-->
            <!--returning：指定形参名，通过该形参访问目标方法抛出的异常&ndash;&gt;-->
            <!--<aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="joinPoint"></aop:after-returning>-->
            <!--&lt;!&ndash;3.2.3 环绕通知&ndash;&gt;-->
            <!--<aop:around method="myAround" pointcut-ref="myPointCut"></aop:around>-->
            <!--&lt;!&ndash;3.2.4 抛出通知：用于处理程序发生异常&ndash;&gt;-->
            <!--&lt;!&ndash;注意：如果程序没有异常，将不会执行增强&ndash;&gt;-->
            <!--&lt;!&ndash;throwing属性：用于设置通知第二个参数的名称，类型Throwable&ndash;&gt;-->
            <!--<aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"></aop:after-throwing>-->
            <!--&lt;!&ndash;3.2.5 最终通知：无论程序发生任何事情，都将执行&ndash;&gt;-->
            <!--<aop:after method="myAfter" pointcut-ref="myPointCut"></aop:after>-->
        </aop:aspect>
    </aop:config>
    <aop:aspectj-autoproxy  proxy-target-class="true"/>

</beans>